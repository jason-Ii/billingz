plugins {
    id "com.android.library"
    id "maven-publish"
    id "kotlin-android"
    id "kotlin-kapt"
    id "org.jetbrains.dokka"
}

apply from: "$project.rootDir/spotless.gradle"

android {

    // Github Packages
    def githubProperties = new Properties()
    githubProperties.load(new FileInputStream(rootProject.file("github.properties")))
    githubProperties["gpr.usr"] ?: System.getenv("GPR_USER")

    githubProperties.load(new FileInputStream(rootProject.file("github.properties")))
    githubProperties["gpr.key"] ?: System.getenv("GPR_API_KEY")

    def versionProperties = new Properties()
    rootProject.file("version.properties").withInputStream { versionProperties.load(it) }

    def getArtifactId = { ->
        return  "billingz"
    }

    //always two digits
    def getMinor = { ->
        String minor = versionProperties['v.minor']
        var m = Integer.valueOf(minor)
        if(m < 10) {
            return "0${minor}"
        }
        return minor
    }

    def getHotfix = { ->
        String hotfix = versionProperties['v.hotfix']
        var h = Integer.valueOf(hotfix)
        if(h < 10) {
            return "${hotfix}0"
        }
        return hotfix
    }

    def getDynamicVersionCode = { ->
        String major = versionProperties['v.major']
        String minor = getMinor()
        String hotfix = getHotfix()

        String result = "${major}${minor}${hotfix}"
        return result.toInteger()
    }

    def getVersionName = { ->
        String major  = versionProperties['v.major']
        String minor  = getMinor()
        String hotfix = getHotfix()
        String result = "${major.toString()}.${minor.toString()}.${hotfix.toString()}"
        return result
    }

    compileSdk LibraryInfo.compileSDK
    buildToolsVersion LibraryInfo.buildTools

    defaultConfig {
        minSdk LibraryInfo.minSDK
        targetSdk LibraryInfo.targetSDK
        group = "com.zuko.billingz"
        versionCode 1
        versionName getVersionName()
        multiDexEnabled false
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"
    }
    buildTypes {
        debug {
            minifyEnabled false
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    buildFeatures {
        viewBinding true
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    lintOptions {
        // set to true to turn off analysis progress reporting by lint
        quiet false
        // if true, stop the gradle build if errors are found
        abortOnError true
        // set to true to have all release builds run lint on issues with severity=fatal
        // and abort the build (controlled by abortOnError above) if fatal issues are found
        checkReleaseBuilds true
        // Normally lint will analyze all dependencies along with each module; this ensures
        // that lint can correctly (for example) determine if a resource declared in a library
        // is unused; checking only the library in isolation would not be able to identify this
        // problem. However, this leads to quite a bit of extra computation; a library is
        // analyzed repeatedly, for each module that it is used in.
        checkDependencies true
    }
}

dependencies {

    api project(':lib:core')
    api project(':lib:google')
    api project(':lib:amazon')

    implementation 'androidx.core:core-ktx:1.6.0'
    implementation 'androidx.appcompat:appcompat:1.3.1'
    implementation 'com.google.android.material:material:1.4.0'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
}

tasks.dokkaHtmlMultiModule.configure {
    //outputDirectory.set(buildDir.resolve("dokkaCustomMultiModuleOutput"))
}


task installGitHook(type: Copy) {
    println "Installing git hooks..."

    from new File(rootProject.rootDir, "scripts/pre-commit")
    into { new File(rootProject.rootDir, '.git/hooks') }

    fileMode 0775
}

tasks.getByName("preBuild").dependsOn installGitHook
