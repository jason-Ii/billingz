/*
 *
 *  * Copyright 2021 rjsuzuki
 *  *
 *  * Licensed under the Apache License, Version 2.0 (the "License");
 *  * you may not use this file except in compliance with the License.
 *  * You may obtain a copy of the License at
 *  *
 *  * http://www.apache.org/licenses/LICENSE-2.0
 *  *
 *  * Unless required by applicable law or agreed to in writing, software
 *  * distributed under the License is distributed on an "AS IS" BASIS,
 *  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  * See the License for the specific language governing permissions and
 *  * limitations under the License.
 *  *
 *
 */

plugins {
    id "com.android.library"
    id "maven-publish"
    id "kotlin-android"
    id "kotlin-kapt"
    id 'kotlin-parcelize'
    id "org.jetbrains.dokka"
}

apply from: "${project.rootDir}/spotless.gradle"
apply from: "${project.rootDir}/gradle/version.gradle"
apply from: "${project.rootDir}/gradle/tasks.gradle"
apply from: "${project.rootDir}/gradle/publish.gradle"

android {
    namespace = "${LibraryInfo.namespace}.google"

    compileSdk LibraryInfo.compileSDK
    buildToolsVersion = LibraryInfo.buildTools

    defaultConfig {
        minSdk LibraryInfo.minSDK
        targetSdk LibraryInfo.targetSDK
        group = LibraryInfo.groupId
        multiDexEnabled false
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"

        setProperty("archivesBaseName", "${project.ext.get("googleArtifact")}")
    }

    buildTypes {
        debug {
            minifyEnabled false
            buildConfigField "String", "VERSION", "\"" + project.ext.get("billingzVersion") + "\""
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            buildConfigField "String", "VERSION", "\"" + project.ext.get("billingzVersion") + "\""
        }
    }
    compileOptions {
        sourceCompatibility LibraryInfo.sourceCompatibility
        targetCompatibility LibraryInfo.targetCompatibility
    }
    kotlinOptions {
        jvmTarget = LibraryInfo.kotlinJvmTarget
    }
    buildFeatures {
        buildConfig true
    }
    lintOptions {
        baseline file("../lint-baseline.xml")
        // set to true to turn off analysis progress reporting by lint
        quiet false
        // if true, stop the gradle build if errors are found
        abortOnError true
        // set to true to have all release builds run lint on issues with severity=fatal
        // and abort the build (controlled by abortOnError above) if fatal issues are found
        checkReleaseBuilds false
        // Normally lint will analyze all dependencies along with each module; this ensures
        // that lint can correctly (for example) determine if a resource declared in a library
        // is unused; checking only the library in isolation would not be able to identify this
        // problem. However, this leads to quite a bit of extra computation; a library is
        // analyzed repeatedly, for each module that it is used in.
        checkDependencies true
    }
}

dependencies {
    api project(':lib:core')
    api "com.android.billingclient:billing-ktx:7.1.1"
}

dokkaHtml.configure {
    dokkaSourceSets {
        named("main") {
            noAndroidSdkLink.set(false)
        }
    }
}
